syntax = "proto3";

package thesemanticapi;

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

enum ConceptTypeParam {
    NYTD_GEO = 0;
    NYTD_PER = 1;
    NYTD_ORG = 2;
    NYTD_DES = 3;
}

message Concept {
    message ArticleListMessage {
        message ResultsMessage {
            message ConceptsMessage {
                repeated string nytd_des = 1;
                repeated string nytd_org = 2;
                repeated string nytd_per = 3;
            }

            string body = 1;
            string byline = 2;
            ConceptsMessage concepts = 3;
            string date = 4;
            string document_type = 5;
            string title = 6;
            string type_of_material = 7;
            string url = 8;
        }

        repeated ResultsMessage results = 1;
        int32 total = 2;
    }

    message CombinationsMessage {
        string combination_note = 1;
        int32 combination_source_concept_id = 2;
        string combination_source_concept_name = 3;
        string combination_source_concept_type = 4;
        int32 combination_target_concept_id = 5;
        string combination_target_concept_name = 6;
        string combination_target_concept_type = 7;
    }

    message LinksMessage {
        int32 concept_id = 1;
        string concept_name = 2;
        string concept_status = 3;
        string concept_type = 4;
        int32 is_times_tag = 5;
        string link = 6;
        int32 link_id = 7;
        string link_type = 8;
        string mapping_type = 9;
        string relation = 10;
    }

    message ScopeNotesMessage {
        string scope_note = 1;
        string scope_note_name = 2;
        string scope_note_type = 3;
    }

    message TaxonomyMessage {
        int32 source_concept_id = 1;
        string source_concept_name = 2;
        string source_concept_type = 3;
        string source_concept_vernacular = 4;
        int32 target_concept_id = 5;
        string target_concept_name = 6;
        string target_concept_type = 7;
        string target_concept_vernacular = 8;
        string taxonomic_relation = 9;
        string taxonomic_verification_status = 10;
    }

    repeated ConceptRelation ancestors = 1;
    ArticleListMessage article_list = 2;
    repeated CombinationsMessage combinations = 3;
    string concept_created = 4;
    int32 concept_id = 5;
    string concept_name = 6;
    string concept_status = 7;
    string concept_type = 8;
    string concept_updated = 9;
    repeated ConceptRelation descendants = 10;
    int32 is_times_tag = 11;
    repeated LinksMessage links = 12;
    repeated ScopeNotesMessage scope_notes = 13;
    string search_api_query = 14;
    repeated TaxonomyMessage taxonomy = 15;
    string vernacular = 16;
}

message ConceptRelation {
    enum ConceptRelationClass {
        CONCEPT_RELATION_CLASS_NYTD_GEO = 0;
        CONCEPT_RELATION_CLASS_NYTD_PER = 1;
        CONCEPT_RELATION_CLASS_NYTD_ORG = 2;
        CONCEPT_RELATION_CLASS_NYTD_DES = 3;
    }

    ConceptRelationClass class = 1;
    string concept_created = 2;
    int32 concept_id = 3;
    string concept_name = 4;
    string concept_status = 5;
    string concept_type = 6;
    string concept_updated = 7;
    int32 is_times_tag = 8;
    string vernacular = 9;
}

message GetConceptSearchRequest {
    enum GetConceptSearchRequestFields {
        GET_CONCEPT_SEARCH_REQUEST_FIELDS_ALL = 0;
        GET_CONCEPT_SEARCH_REQUEST_FIELDS_PAGES = 1;
        GET_CONCEPT_SEARCH_REQUEST_FIELDS_TICKER_SYMBOL = 2;
        GET_CONCEPT_SEARCH_REQUEST_FIELDS_LINKS = 3;
        GET_CONCEPT_SEARCH_REQUEST_FIELDS_TAXONOMY = 4;
        GET_CONCEPT_SEARCH_REQUEST_FIELDS_COMBINATIONS = 5;
        GET_CONCEPT_SEARCH_REQUEST_FIELDS_GEOCODES = 6;
        GET_CONCEPT_SEARCH_REQUEST_FIELDS_ARTICLE_LIST = 7;
        GET_CONCEPT_SEARCH_REQUEST_FIELDS_SCOPE_NOTES = 8;
        GET_CONCEPT_SEARCH_REQUEST_FIELDS_SEARCH_API_QUERY = 9;
    }

    // "all" or comma-separated list of specific optional fields: pages, ticker_symbol, links, taxonomy, combinations, geocodes, article_list, scope_notes, search_api_query
    // 
    // Optional fields are returned in result_set. They are briefly explained here:
    // 
    // pages: A list of topic pages associated with a specific concept.
    // ticker_symbol: If this concept is a publicly traded company, this field contains the ticker symbol.
    // links: A list of links from this concept to external data resources.
    // taxonomy: For descriptor concepts, this field returns a list of taxonomic relations to other concepts.
    // combinations: For descriptor concepts, this field returns a list of the specific meanings tis concept takes on when combined with other concepts.
    // geocodes: For geographic concepts, the full GIS record from geonames.
    // article_list: A list of up to 10 articles associated with this concept.
    // scope_notes: Scope notes contains clarifications and meaning definitions that explicate the relationship between the concept and an article.
    // search_api_query: Returns the request one would need to submit to the Article Search API to obtain a list of articles annotated with this concept.
    GetConceptSearchRequestFields fields = 1;

    // Integer value for the index count from the first concept to the last concept, sorted alphabetically. Used in a Search Query. A Search Query will return up to 10 concepts in its results.
    int32 offset = 2;

    // Precedes the search term string. Used in a Search Query. Except for <specific_concept_name>, Search Query will take the required parameters listed above (<concept_type>, <concept_uri>, <article_uri>) as an optional_parameter in addition to the query=<query_term>.
    string query = 3;
}

message GetConceptSearchResponse {
    string copyright = 1;
    int32 num_results = 2;
    repeated ConceptRelation results = 3;
    string status = 4;
}

message GetNameConceptTypeSpecificConceptRequest {
    enum GetNameConceptTypeSpecificConceptRequestFields {
        GET_NAME_CONCEPT_TYPE_SPECIFIC_CONCEPT_REQUEST_FIELDS_ALL = 0;
        GET_NAME_CONCEPT_TYPE_SPECIFIC_CONCEPT_REQUEST_FIELDS_PAGES = 1;
        GET_NAME_CONCEPT_TYPE_SPECIFIC_CONCEPT_REQUEST_FIELDS_TICKER_SYMBOL = 2;
        GET_NAME_CONCEPT_TYPE_SPECIFIC_CONCEPT_REQUEST_FIELDS_LINKS = 3;
        GET_NAME_CONCEPT_TYPE_SPECIFIC_CONCEPT_REQUEST_FIELDS_TAXONOMY = 4;
        GET_NAME_CONCEPT_TYPE_SPECIFIC_CONCEPT_REQUEST_FIELDS_COMBINATIONS = 5;
        GET_NAME_CONCEPT_TYPE_SPECIFIC_CONCEPT_REQUEST_FIELDS_GEOCODES = 6;
        GET_NAME_CONCEPT_TYPE_SPECIFIC_CONCEPT_REQUEST_FIELDS_ARTICLE_LIST = 7;
        GET_NAME_CONCEPT_TYPE_SPECIFIC_CONCEPT_REQUEST_FIELDS_SCOPE_NOTES = 8;
        GET_NAME_CONCEPT_TYPE_SPECIFIC_CONCEPT_REQUEST_FIELDS_SEARCH_API_QUERY = 9;
    }

    ConceptTypeParam concept_type = 1;

    // "all" or comma-separated list of specific optional fields: pages, ticker_symbol, links, taxonomy, combinations, geocodes, article_list, scope_notes, search_api_query
    // 
    // Optional fields are returned in result_set. They are briefly explained here:
    // 
    // pages: A list of topic pages associated with a specific concept.
    // ticker_symbol: If this concept is a publicly traded company, this field contains the ticker symbol.
    // links: A list of links from this concept to external data resources.
    // taxonomy: For descriptor concepts, this field returns a list of taxonomic relations to other concepts.
    // combinations: For descriptor concepts, this field returns a list of the specific meanings tis concept takes on when combined with other concepts.
    // geocodes: For geographic concepts, the full GIS record from geonames.
    // article_list: A list of up to 10 articles associated with this concept.
    // scope_notes: Scope notes contains clarifications and meaning definitions that explicate the relationship between the concept and an article.
    // search_api_query: Returns the request one would need to submit to the Article Search API to obtain a list of articles annotated with this concept.
    GetNameConceptTypeSpecificConceptRequestFields fields = 2;

    // Precedes the search term string. Used in a Search Query. Except for <specific_concept_name>, Search Query will take the required parameters listed above (<concept_type>, <concept_uri>, <article_uri>) as an optional_parameter in addition to the query=<query_term>.
    string query = 3;
    string specific_concept = 4;
}

message GetNameConceptTypeSpecificConceptResponse {
    string copyright = 1;
    int32 num_results = 2;
    repeated Concept results = 3;
    string status = 4;
}

message TestModel {
    enum TestModelCategory {
        TEST_MODEL_CATEGORY_NYTD_GEO = 0;
        TEST_MODEL_CATEGORY_NYTD_PER = 1;
        TEST_MODEL_CATEGORY_NYTD_ORG = 2;
        TEST_MODEL_CATEGORY_NYTD_DES = 3;
    }

    message ClassMessage {
        string something = 1;
    }

    TestModelCategory category = 1;
    repeated ClassMessage class = 2;
    bool test_bool = 3;
    google.protobuf.BoolValue test_bool_value = 4;
    google.protobuf.DoubleValue test_num_value = 5;
    google.protobuf.DoubleValue test_numer_value = 6;
    google.protobuf.FloatValue test_float_value = 7;
    google.protobuf.StringValue test_string_value = 8;
    google.protobuf.BytesValue test_bytes_value = 9;
    google.protobuf.Any test_any_value = 10;
    map<string, TestModel> test_map_object = 11;
    map<string, string> test_map_scalar = 12;
}

service TheSemanticAPIService {
    rpc GetConceptSearch(GetConceptSearchRequest) returns (GetConceptSearchResponse) {}

    rpc GetNameConceptTypeSpecificConcept(GetNameConceptTypeSpecificConceptRequest) returns (GetNameConceptTypeSpecificConceptResponse) {}

    rpc GetSomethingBlah(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}
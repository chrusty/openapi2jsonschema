swagger: "2.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  description: A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification
  termsOfService: http://helloreverb.com/terms/
  contact:
    name: Wordnik API Team
    email: foo@example.com
    url: http://madskristensen.net
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: petstore.swagger.wordnik.com
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /pets/{ids}:
    get:
      description: |
        Returns all pets from the system that the user has access to
      operationId: findPetsByIds
      parameters:
        - $ref: '#/parameters/idsParam'
        - $ref: 'parameters.yaml#/limitsParam'
      responses:
        "200":
          description: pet response
          schema:
            $ref: 'Pets.yaml'
        default:
          description: unexpected error
          schema:
            $ref: 'Error.yaml'
  /pets:
    get:
      description: |
        Returns all pets from the system that the user has access to
      operationId: findPets
      parameters:
        - $ref: 'parameters.yaml#/tagsParam'
        - $ref: 'parameters.yaml#/limitsParam'
      responses:
        "200":
          description: pet response
          schema:
            $ref: 'Pets.yaml'
        default:
          description: unexpected error
          schema:
            $ref: 'Error.yaml'
    post:
      description: Creates a new pet in the store.  Duplicates are allowed
      operationId: addPet
      parameters:
        - name: pet
          in: body
          description: Pet to add to the store
          required: true
          schema:
            $ref: 'Pet.yaml'
      responses:
        "200":
          description: pet response
          schema:
            $ref: 'https://raw.githubusercontent.com/NYTimes/openapi2proto/master/fixtures/petstore/Pet.yaml'
        default:
          description: unexpected error
          schema:
            $ref: 'Error.yaml'
  /pets/{id}:
    get:
      description: Returns a user based on a single ID, if the user does not have access to the pet
      operationId: find pet by id
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: pet response
          schema:
            $ref: 'Pet.yaml'
        default:
          description: unexpected error
          schema:
            $ref: 'Error.yaml'
    delete:
      description: deletes a single pet based on the ID supplied
      operationId: deletePet
      parameters:
        - name: id
          in: path
          description: ID of pet to delete
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: pet deleted
        default:
          description: unexpected error
          schema:
            $ref: 'Error.yaml'

parameters:
  idsParam:
    name: ids
    in: path
    description: ids to filter by
    required: false
    type: array
    collectionFormat: csv
    items:
      type: string

